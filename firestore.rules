rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ----------------------------
    // HELPER FUNCTIONS
    // ----------------------------

    // 1) Check if user is a dietitian
    function isDietitian() {
      return request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "dietitian";
    }

    // 2) Check if dietitian is assigned to a specific client (legacy method)
    function isDietitianAssignedToClient(clientId) {
      return isDietitian()
        && exists(/databases/$(database)/documents/users/$(clientId))
        && get(/databases/$(database)/documents/users/$(clientId)).data.assignedDietitianId == request.auth.uid;
    }

    // 3) Check if dietitian has access to client via expertId (new method)
    function isDietitianLinkedToClient(clientId) {
      return isDietitian()
        && exists(/databases/$(database)/documents/users/$(clientId))
        && get(/databases/$(database)/documents/users/$(clientId)).data.expertId == request.auth.uid;
    }

    // 4) Check if user can access this userId's data (supports both connection methods)
    function canAccessUserData(userId) {
      return request.auth != null
        && (request.auth.uid == userId
            || isDietitianAssignedToClient(userId)
            || isDietitianLinkedToClient(userId));
    }

    // 5) Check if user is linked to a specific dietitian via expertId
    function isLinkedToExpert(dietitianId) {
      return request.auth != null
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.expertId == dietitianId;
    }

    // ----------------------------
    // USERS COLLECTION
    // ----------------------------
    match /users/{userId} {
      // Read: Any authenticated user can read user profiles
      allow read: if request.auth != null;

      // Create: Only the user themselves can create their profile
      allow create: if request.auth != null && request.auth.uid == userId;

      // Update: User themselves or assigned dietitian
      allow update: if canAccessUserData(userId);

      // Delete: Only the user themselves
      allow delete: if request.auth != null && request.auth.uid == userId;
      
      // ----------------------------
      // HEALTH DATA - CAPITAL D VERSION
      // ----------------------------
      match /healthData/{date} {
        // Allow read/write access to user and assigned dietitian
        allow read, write: if canAccessUserData(userId);
        
        // HealthKit subcollection under healthData
        match /healthkit/{healthkitDocId} {
          allow read, write: if canAccessUserData(userId);
        }
        
        // Meals subcollection under healthData
        match /meals/{mealId} {
          allow read, write: if canAccessUserData(userId);
        }
        
        // Any other subcollections under healthData/{date}
        match /{subcollection}/{docId} {
          allow read, write: if canAccessUserData(userId);
        }
      }

      // ----------------------------
      // HEALTH DATA - LOWERCASE VERSION (for backwards compatibility)
      // ----------------------------
      match /healthdata/{date} {
        // Allow read/write access to user and assigned dietitian
        allow read, write: if canAccessUserData(userId);
        
        // HealthKit subcollection under healthdata
        match /healthkit/{healthkitDocId} {
          allow read, write: if canAccessUserData(userId);
        }
        
        // Meals subcollection under healthdata
        match /meals/{mealId} {
          allow read, write: if canAccessUserData(userId);
        }
        
        // Any other subcollections under healthdata/{date}
        match /{subcollection}/{docId} {
          allow read, write: if canAccessUserData(userId);
        }
      }

      // ----------------------------
      // DIRECT MEALS COLLECTION
      // ----------------------------
      match /meals/{mealId} {
        allow read, write: if canAccessUserData(userId);
      }

      // ----------------------------
      // WORKOUT SESSIONS
      // ----------------------------
      match /workoutSessions/{workoutId} {
        allow read, write: if canAccessUserData(userId);
      }

      // ----------------------------
      // WORKOUT STATS
      // ----------------------------
      match /stats/{statsId} {
        allow read, write: if canAccessUserData(userId);
      }

      // ----------------------------
      // FAVORITE WORKOUTS
      // ----------------------------
      match /favoriteWorkouts/{workoutId} {
        allow read, write: if canAccessUserData(userId);
      }

      // ----------------------------
      // OTHER USER SUBCOLLECTIONS
      // ----------------------------
      match /badges/{badgeId} {
        allow read, write: if canAccessUserData(userId);
      }

      match /notifications/{notificationId} {
        allow read, write: if request.auth != null
                          && request.auth.uid == userId;
      }

      // Catch-all for other subcollections
      match /{subCollection}/{docId} {
        allow read, write: if canAccessUserData(userId);
      }
    }

    // ----------------------------
    // DIETITIANS COLLECTION
    // ----------------------------
    match /dietitians/{dietitianId} {
      // Read: Any authenticated user can read dietitian profiles (for expert lookup)
      allow read: if request.auth != null;

      // Create: Only the dietitian themselves can create their profile
      allow create: if request.auth != null && request.auth.uid == dietitianId;

      // Update: Only the dietitian themselves
      allow update: if request.auth != null && request.auth.uid == dietitianId;

      // Delete: Only the dietitian themselves
      allow delete: if request.auth != null && request.auth.uid == dietitianId;

      // ----------------------------
      // CLIENTS SUBCOLLECTION (for expert connections)
      // ----------------------------
      match /clients/{clientId} {
        // Read: Dietitian can read their clients, clients can read their own connection
        allow read: if request.auth != null
                   && (request.auth.uid == dietitianId || request.auth.uid == clientId);

        // Create: Only the client themselves can create their connection
        allow create: if request.auth != null
                     && request.auth.uid == clientId
                     && request.resource.data.userId == clientId;

        // Update: Dietitian or client can update
        allow update: if request.auth != null
                     && (request.auth.uid == dietitianId || request.auth.uid == clientId);

        // Delete: Client can delete their own connection, dietitian can remove clients
        allow delete: if request.auth != null
                     && (request.auth.uid == dietitianId || request.auth.uid == clientId);
      }
      
      // ----------------------------
      // APPOINTMENTS SUBCOLLECTION (for appointment scheduling)
      // ----------------------------
      match /appointments/{appointmentId} {
        // Dietitians can read/write/list their own appointments
        allow read, write, list: if request.auth != null && request.auth.uid == dietitianId;
        
        // Clients can read/update appointments where they are the client
        allow read, update: if request.auth != null &&
          (resource.data.clientId == request.auth.uid ||
           request.resource.data.clientId == request.auth.uid);
        
        // Clients can create appointments for themselves
        allow create: if request.auth != null &&
          request.auth.uid == request.resource.data.clientId;
      }
      
      // Other dietitian subcollections
      match /{subCollection}/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == dietitianId;
      }
    }

    // ----------------------------
    // CHATS COLLECTION
    // ----------------------------
    match /chats/{chatId} {
      // List and read chats
      allow list: if request.auth != null;
      allow get: if request.auth != null
                && request.auth.uid in resource.data.participantIds;

      // Create new chat
      allow create: if request.auth != null
                  && request.resource.data.participantIds.size() == 2
                  && request.auth.uid in request.resource.data.participantIds;

      // Update chat
      allow update: if request.auth != null
                  && request.auth.uid in resource.data.participantIds;

      // No deletion allowed
      allow delete: if false;

      // Messages subcollection
      match /messages/{messageId} {
        // Read messages if user is participant
        allow read: if request.auth != null
                  && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;

        // Create message
        allow create: if request.auth != null
                    && request.resource.data.senderId == request.auth.uid
                    && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;

        // Update message (for read receipts)
        allow update: if request.auth != null
                    && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;

        // No message deletion
        allow delete: if false;
      }
    }

    // ----------------------------
    // USER CHALLENGES
    // ----------------------------
    match /userChallenges/{userId} {
      allow read, write: if canAccessUserData(userId);
      
      // All subcollections under userChallenges
      match /{document=**} {
        allow read, write: if canAccessUserData(userId);
      }
    }

    // ----------------------------
    // PUBLIC CHALLENGES
    // ----------------------------
    match /challenges/{challengeId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isDietitian();
    }

    // ----------------------------
    // POSTS / SOCIAL FEED
    // ----------------------------
    match /posts/{postId} {
      // Read published posts or any post if dietitian
      allow read: if request.auth != null
                && (resource.data.status == "published" || isDietitian());
      
      // Create post
      allow create: if request.auth != null
                  && request.resource.data.authorId == request.auth.uid;
      
      // Update/delete post
      allow update, delete: if request.auth != null
                          && (resource.data.authorId == request.auth.uid || isDietitian());

      // Likes subcollection
      match /likes/{likeUserId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == likeUserId;
      }

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null
                    && request.resource.data.commenterId == request.auth.uid;
        allow delete: if request.auth != null
                    && (resource.data.commenterId == request.auth.uid || isDietitian());
        allow update: if false;
      }
    }

    // ----------------------------
    // GLOBAL NOTIFICATIONS
    // ----------------------------
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null
                        && request.auth.uid == resource.data.userId;
    }

    // ----------------------------
    // ASSIGNMENT REQUESTS
    // ----------------------------
    match /assignmentRequests/{requestId} {
      // Create request
      allow create: if request.auth != null
                  && request.resource.data.clientId == request.auth.uid
                  && request.resource.data.status == "pending";
      
      // Read request
      allow read: if request.auth != null
                && (isDietitian() || request.auth.uid == resource.data.clientId);
      
      // Update request (dietitians only)
      allow update: if isDietitian();
      
      // No deletion
      allow delete: if false;
    }

    // ----------------------------
    // WORKOUT TEMPLATES COLLECTION (Global workout templates)
    // ----------------------------
    match /workoutTemplates/{templateId} {
      // Anyone can read active workout templates
      allow read: if request.auth != null;
      
      // Only admin/system can create/update templates
      allow create, update: if false; // Will be managed via Firebase console/admin
      
      // No deletion allowed
      allow delete: if false;
    }

    // ----------------------------
    // DEFAULT DENY ALL
    // ----------------------------
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}